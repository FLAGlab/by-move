load "nat-plus"
module Reduce{
    open N
    ###################################################################### Reduce Function
    # This function defines the arrow in the paper, it would be call reduce for future
    # , references. ->* is the the irreflexive transitive closures of ->>.
    # TODO: This reduce function must be endowed with the Athena's transitive closure
    #       theory, this give automatically ->> all the properties instead of having
    #       to assert them.
    declare ->>, ->* : (T) [T T]   ->  Boolean
    declare -n>:       (T) [N T T] -> Boolean

    define [x y z y' m n] := 
        [
            ?x:'S1
            ?y:'S2
            ?z:'S3
            ?y':'S4
            ?m:N
            ?n:N
        ]

    assert -n>-zero := 
        (forall x y . (-n> zero x y) <==> x = y)

    assert -n>-nonzero := 
        (forall x n y .
            (-n> (S n) x y) <==> (exists z . (-n> n x z) & (z ->> y)))

    assert TC-definition := 
        (forall x y . x ->* y <==> (exists n . (-n> (S n) x y)))

    assert -n>-sum :=
        (forall n m x y z . 
            (-n> m x y) & (-n> n y z) ==> (-n> (m + n) x z))

    assert ->>-inclusion :=  (forall x y . x ->> y ==> x ->* y)

    assert TC-lemma := 
        (forall x y . 
            x ->* y <==> 
                x ->> y | (exists y' . x ->* y' & y' ->> y))

    assert TC-Transitivity := 
        (forall x y z . x ->* y & y ->* z  ==> x ->* z)

    assert TC-Transitivity1 := 
        (forall x y z . x ->* y & y ->> z ==> x ->* z)

    assert TC-Transitivity2 := 
        (forall x y z . x ->> y & y ->> z  ==> x ->* z)

    # The idea is to define a method !chain->* that works as !chain:
    #   (!chain->* [ t_0 ->> t_1 [P1] ->> t_2 [P2] ... --> t_n [Pn] ])
    # Proves and returns (t_0 ->* t_n).

    # (
    #     define (chain L)
    #     (
    #         dletrec (
    #             (c (cell true))
    #             (unbracket (lambda (P) (match P ([_P] (unbracket _P)) (_ P))))
    #             (bracket (lambda (P) (match P ((list-of _x _more) P) (_ [P]))))
    #             (
    #                 chain-help 
    #                 (
    #                     method (L)
    #                     (
    #                         dmatch L
    #                             (
    #                                 (list-of --> (list-of _y (list-of _P _rest)))
    #                                 (dseq 
    #                                 (!reduce c _y (unbracket _P))
    #                                 (!chain-help _rest))
    #                             )
    #                             (
    #                                 (list-of <-- (list-of _y (list-of _P _rest)))
    #                                 (dseq 
    #                                 (!expand c _y (unbracket _P))
    #                                 (!chain-help _rest))
    #                             )
    #                             (
    #                                 (list-of = (list-of _y (list-of _P _rest)))
    #                                 (dseq
    #                                 (!do-rewrite c _y (bracket _P) =)
    #                                 (!chain-help _rest)))
    #                                 ([] (!claim (ref c))
    #                             )
    #                     )
    #                 )
    #             )
    #                 )
    #         (
    #             dmatch L
    #             (
    #                 (list-of t rest)
    #                 (
    #                     dseq
    #                     (!setup c t)
    #                     (!chain-help rest)
    #                 )
    #             )
    #         )
    #     )
    # )

}