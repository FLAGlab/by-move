load "erlang.ath"
module ByMove {
    open Actor
    # TODO: F and F0 are functions, but this is not the best way to define this.
    #       This should be fixed when defining the whole syntaxis/semantics for
    #       expressions.
    declare F : Expression
    # requiere(actorIde, Functions)
    declare requiere: [Expression Expression] -> Expression
    # response_requiere(actorIde, Functions)
    declare requiring:         [Actor Actor (Cfg ConfigElement)] -> (Cfg ConfigElement) 
    declare response_requiere: [Expression Expression]           -> Expression


    define [config0 mailbox0 linkedActors0 linkedActors1 frameStackList0 frameStackList1] := 
        [
            ?config0:   (Cfg ConfigElement)
            ?mailbox0:  (List Expression)
            ?linkedActors0:  (List Expression)
            ?linkedActors1:  (List Expression)
            ?frameStackList0: (List FrameStack)
            ?frameStackList1: (List FrameStack)
        ]

    ############################################### Semantics when an actor is requiring F
    ### In this case requiring reversibly adds ! to the frameStackList, as many
    ### as likedActors linked to such  LiveActor.
    define requiring_actor := 
        (LiveActor 
            actorIde 
            ((frame' (requiere actorIde F)) :: frameStackList)
            expression
            mailbox0
            linkedActors
            flag
        )

    define required_actor := 
        (LiveActor 
            actorIde 
            frameStackList0
            (requiere actorIde F)
            mailbox0
            linkedActors 
            flag
        )

    define recursive_actor := 
        (LiveActor 
            actorIde 
            frameStackList0
            expression
            mailbox0
            linkedActors0
            flag
        )

    define recursive_actor_after := 
        (LiveActor 
            actorIde 
            ((bang' actorIdeLink) :: frameStackList0)
            expression
            mailbox0
            linkedActors1
            flag
        )


    assert* requiring_definition_base := 
        (
            (linkedActors0 = nil)
            ==>
            (
                (requiring requiring_actor recursive_actor config)
                =
                (cg config (One (Actor required_actor))) 
            )
        )

    assert* requiring_definition_recursive := 
        (
            (linkedActors0 = (actorIdeLink :: linkedActors1))
            ==>
            (
                (requiring requiring_actor recursive_actor config)
                =
                (requiring requiring_actor recursive_actor_after config)
            )
        )

    # TODO: the config (Null) in requiring is never used
    assert* reduce_requiere := 
        (
            (cg config (One (Actor requiring_actor)))
            -->
            (cg config (requiring requiring_actor requiring_actor Null))
        )

    define owner_actor_received := 
        (LiveActor 
            actorIdeLink
            (frameStackList0 ++ [(frame' F)] ++ frameStackList1) 
            expression
            ((requiere actorIde F) :: mailbox) 
            linkedActors
            flag
        )

    define surrendering_actor := 
        (LiveActor 
            actorIdeLink
            ((bang' actorIde) :: (frameStackList0 ++ frameStackList1))
            (response_requiere actorIde F) 
            mailbox
            linkedActors
            flag
        )

    assert* reduce_response_requiring :=
        (
            (cg config (One (Actor owner_actor_received)))
            -->
            (cg config (One Actor surrendering_actor))
        )

    define owner_actor := 
        (LiveActor 
            actorIdeFrom
            (frameStackList0 ++ [(frame' F)] ++ frameStackList1) 
            expression0
            mailbox
            linkedActors0
            flag
        )

    # TODO: Review if the mailbox/expression0 should be the same as in owner_actor
    define surrender_actor :=
        (LiveActor 
            actorIdeFrom
            (frameStackList0 ++ frameStackList1) 
            expression0
            mailbox
            linkedActors0
            flag
        )
    
    # TODO: Review if the mailbox/expression0 should be the same as in requiring_actor
    define endowed_actor :=
        (LiveActor 
            actorIde 
            ((frame' F) :: frameStackList)
            expression
            mailbox0
            linkedActors
            flag
        )

    # Si un nodo quiere una funcion eventualmente la podrá usar 
    define eventual_ownership :=
        ( 
           forall config flag actorIde actorIdeFrom frameStackList frameStackList0
                 frameStackList1 expression expression0 mailbox mailbox0 linkedActors 
                 linkedActors0 .
           (cg config (cg (One (Actor owner_actor)) (One (Actor requiring_actor)) )) 
           -*>
           (cg config (cg (One (Actor surrender_actor)) (One (Actor endowed_actor)) ))
        )

    # # la funciones existen máximo 1 vex en la red

}




