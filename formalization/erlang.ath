load "list-of.ath"
module Actor{
    open List
    domains FrameStack, Expression, Value, Flag
    declare normal, kill, EXIT: Value
    declare ff, tt: Flag
    datatype Actor 
             := (LiveActor
                    Ide # actor name, this is no in the paper, but how else do I identify an actor?
                    FrameStack
                    Expression
                    (List Value) # mailbox TODO: Change to list of messages
                    (List Ide) # set of linked actors, TODO: Change it to a set...
                    Flag
                )|(TerminatedActor (List Ide))  # list of linked actors
    datatype Signal := (msg Value) | (exit Value Flag) | link | unlink 
    datatype Action := (send Ide Ide Signal) | (rec Value) | (self Ide) | 
                       (arr Ide Ide Signal) | (spawn Ide Expression Expression) | 
                       sequential | termination | Flag

    define [frameStack expression mailbox linkedActors flag flag0 actorIde actorIdeTo actorIdeFrom value]
            :=
            [
                ?frameStack:      FrameStack
                ?expression:      Expression
                ?mailbox:         (List Value)
                ?linkedActors:    (List Ide)
                ?flag:            Flag
                ?flag0:            Flag
                ?actorIde:        Ide
                ?actorIdeTo:      Ide
                ?actorIdeFrom:    Ide
                ?value:           Value
            ] 
    ############################################################## Process local semantics
    define exit'      := (exit value flag0)
    define msg'       := (msg value)
    define arr-msg'   := (arr actorIdeFrom actorIdeTo msg')
    define arr-exit'  := (arr actorIdeFrom actorIdeTo exit')
    define arr-link'  := (arr actorIdeFrom actorIdeTo link)
    define actor'   := (LiveActor actorIdeTo frameStack expression mailbox linkedActors flag)
    declare ArrReduction : [Actor Action] -> Actor
    assert* arr-msg :=  (
                            (ArrReduction actor' arr-msg') 
                            = 
                            (
                                LiveActor 
                                    actorIdeTo
                                    frameStack
                                    expression
                                    (mailbox ++ [value])
                                    linkedActors
                                    flag
                            ) 
                        )
    assert* arr-exit-drop-0 := 
                            (
                                (not (actorIdeFrom = actorIdeTo)) &
                                (flag = ff) &
                                (value = normal) & 
                                (
                                    (ArrReduction actor' arr-exit')
                                    =
                                    actor'
                                )
                            )

    assert* arr-exit-drop-1 :=
                            (
                                (not (actorIdeFrom = actorIdeTo)) &
                                (not (actorIdeFrom in linkedActors)) &
                                (flag = ff) &
                                (
                                    (ArrReduction actor' arr-exit')
                                    =
                                    actor'
                                )
                            )
    # TODO: ExitTerm and ExitConv rule page 12

    assert* arr-link := ( 
                            (ArrReduction actor' arr-link')
                            =
                            (
                                LiveActor 
                                    actorIdeTo
                                    frameStack
                                    expression
                                    mailbox
                                    ( actorIdeFrom :: linkedActors )
                                    flag
                            ) 
                        )
    
    # TODO: UnlinkArr, to achieve this I need to implement the rem operation

}