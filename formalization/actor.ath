load "list-of.ath"

module Actor {
    module Msg {
        datatype (Message Ide Ids Idd) := (message' Ide Ids Idd)
    }

    datatype ActorState := exit | active | busy
    datatype (Actor Ide Expressions ProcessBehavior Mailbox) := (actor' Ide Expressions ProcessBehavior Mailbox) 

    declare spawn : (Ide, Expressions, ProcessBehavior, Mailbox) [Ide Expressions ProcessBehavior Mailbox] -> (Actor Ide Expressions ProcessBehavior Mailbox)
    declare ready : (Ide, Expressions, ProcessBehavior, Mailbox) [(Actor Ide Expressions ProcessBehavior Mailbox)] -> ActorState
  #  declare send : [Ide ActorS ActorD] -> Msg
  #  declare receive : [Msg] -> Actor.Actor

    define name := ?name : Ide
    define (spawn_name) := 
        (forall name . (spawn name) = (actor' name nil nil nil))

    assert ready := 
    (fun [
        (ready (actor' [name ::E] PB M)) = (actor' name E PB M)
    ])
    
        
        (forall actor . (ready (actor' [name::busy] PB M)) = (actor' name E PB M)
        (forall actor . (ready (actor' name exit PB M)) = nil)))

    
    

}